@typeparam TModel

<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (Fields != null && Fields.Count > 0)
    {
        @foreach (var field in Fields)
        {
            <div class="mb-2">
                <label>@field.Label</label>
                @if (field.Template != null)
                {
                    @field.Template(Model)
                }
                else
                {
                    <InputText class="form-control" Value="@field.ValueGetter(Model)"
                        ValueChanged="e => field.ValueSetter?.Invoke(Model, e?.ToString() ?? string.Empty)"
                        ValueExpression="null" />
                }
            </div>
        }
    }
    <button class="btn btn-primary" type="submit">LÆ°u</button>
</EditForm>

@code {
    [Parameter] public TModel Model { get; set; } = default!;
    [Parameter] public List<FormFieldConfig<TModel>> Fields { get; set; } = new();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}

@code {
    public class FormFieldConfig<T>
    {
        public string Label { get; set; } = string.Empty;
        public Func<T, string> ValueGetter { get; set; } = _ => string.Empty;
        public Action<T, string>? ValueSetter { get; set; }
        public RenderFragment<T>? Template { get; set; }
    }
}