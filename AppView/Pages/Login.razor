@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AppView.Services.AuthState AuthState

<h3>Đăng nhập</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Tên đăng nhập</label>
        <InputText class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label>Mật khẩu</label>
        <InputText class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>
    <button class="btn btn-primary" type="submit">Đăng nhập</button>
    <span class="text-danger">@errorMessage</span>
</EditForm>

@code {
    [CascadingParameter] public Action<string, string>? ShowToast { get; set; }
    private LoginRequest loginModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("/api/Auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var apiResponse = await response.Content.ReadFromJsonAsync<ApiResponse<AuthResponse>>();
                if (apiResponse?.Success == true && !string.IsNullOrEmpty(apiResponse.Data?.Token))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "token", apiResponse.Data.Token);
                    AuthState.NotifyAuthStateChanged();
                    ShowToast?.Invoke("Đăng nhập thành công!", "success");
                    Navigation.NavigateTo("/");
                }
                else
                {
                    ShowToast?.Invoke(apiResponse?.Message ?? "Đăng nhập thất bại.", "error");
                    errorMessage = apiResponse?.Message ?? "Đăng nhập thất bại.";
                }
            }
            else
            {
                ShowToast?.Invoke("Sai tài khoản hoặc mật khẩu.", "error");
                errorMessage = "Sai tài khoản hoặc mật khẩu.";
            }
        }
        catch (Exception ex)
        {
            ShowToast?.Invoke(ex.Message, "error");
            errorMessage = ex.Message;
        }
    }

    [Inject]
    private IJSRuntime? JS { get; set; }
}