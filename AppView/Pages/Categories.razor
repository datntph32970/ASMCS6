@page "/categories"
@inject HttpClient Http
@using AppDB.Models.DtoAndViewModels.CategoriesService.Dto
@using AppDB.Models.DtoAndViewModels.CategoriesService.ViewModels
@using AppView.Components
@using AppView.Components.Models
@using Microsoft.AspNetCore.Components

<h3>Danh mục</h3>

<GenericModal Title="Thêm danh mục" Visible="showAdd" OnClose="HideAddModal">
    <GenericForm TModel="CategoriesCreateVM" Model="addModel" Fields="addFields" OnValidSubmit="AddCategory" />
</GenericModal>
<GenericModal Title="Sửa danh mục" Visible="showEdit" OnClose="HideEditModal">
    <GenericForm TModel="CategoriesUpdateVM" Model="editModel" Fields="editFields" OnValidSubmit="EditCategory" />
</GenericModal>
<ConfirmDialog Message="Bạn có chắc muốn xóa danh mục này?" Visible="showConfirm" OnConfirm="ConfirmDelete" OnCancel="HideConfirm" />

<button class="btn btn-success mb-2" @onclick="ShowAdd">Thêm danh mục</button>

<GenericTable TItem="CategoriesDto"
              Items="categories"
              Columns="columns"
              OnEdit="ShowEdit"
              OnDelete="AskDelete" />

<Pagination TotalPages="totalPages" CurrentPage="page" OnPageChanged="ChangePage" />

@code {
    private List<CategoriesDto>? categories;
    private CategoriesCreateVM addModel = new();
    private CategoriesUpdateVM editModel = new();
    private List<ColumnConfig<CategoriesDto>> columns = new();
    private List<FormFieldConfig<CategoriesCreateVM>> addFields = new();
    private List<FormFieldConfig<CategoriesUpdateVM>> editFields = new();
    private bool showAdd = false;
    private bool showEdit = false;
    private bool showConfirm = false;
    private Guid deleteId;
    private int page = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    [CascadingParameter] public Action<string, string>? ShowToast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        columns = new()
        {
            new ColumnConfig<CategoriesDto> { Header = "Tên danh mục", FieldSelector = c => c.CategoryName },
            new ColumnConfig<CategoriesDto> { Header = "Mô tả", FieldSelector = c => c.Description ?? "" }
        };
        addFields = new()
        {
            new FormFieldConfig<CategoriesCreateVM> { Label = "Tên danh mục", ValueGetter = m => m.CategoryName, ValueSetter = (m, v) => m.CategoryName = v },
            new FormFieldConfig<CategoriesCreateVM> { Label = "Mô tả", ValueGetter = m => m.Description, ValueSetter = (m, v) => m.Description = v }
        };
        editFields = new()
        {
            new FormFieldConfig<CategoriesUpdateVM> { Label = "Tên danh mục", ValueGetter = m => m.CategoryName, ValueSetter = (m, v) => m.CategoryName = v },
            new FormFieldConfig<CategoriesUpdateVM> { Label = "Mô tả", ValueGetter = m => m.Description, ValueSetter = (m, v) => m.Description = v }
        };
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        // Demo: lấy toàn bộ, phân trang client. Có thể thay bằng API phân trang thực tế
        var all = await Http.GetFromJsonAsync<List<CategoriesDto>>("/api/Categories");
        totalPages = (int)Math.Ceiling((all?.Count ?? 0) / (double)pageSize);
        categories = all?.Skip((page - 1) * pageSize).Take(pageSize).ToList() ?? new();
        StateHasChanged();
    }

    private void ShowAdd()
    {
        addModel = new();
        showAdd = true;
    }
    private void HideAddModal() => showAdd = false;
    private async Task AddCategory()
    {
        var response = await Http.PostAsJsonAsync("/api/Categories", addModel);
        if (response.IsSuccessStatusCode)
        {
            ShowToast?.Invoke("Thêm danh mục thành công!", "success");
            showAdd = false;
            await LoadCategories();
        }
        else
        {
            ShowToast?.Invoke("Thêm danh mục thất bại!", "error");
        }
    }
    private void ShowEdit(CategoriesDto c)
    {
        editModel = new CategoriesUpdateVM { Id = c.id, CategoryName = c.CategoryName, Description = c.Description ?? "" };
        showEdit = true;
    }
    private void HideEditModal() => showEdit = false;
    private async Task EditCategory()
    {
        var response = await Http.PutAsJsonAsync($"/api/Categories/{editModel.Id}", editModel);
        if (response.IsSuccessStatusCode)
        {
            ShowToast?.Invoke("Cập nhật danh mục thành công!", "success");
            showEdit = false;
            await LoadCategories();
        }
        else
        {
            ShowToast?.Invoke("Cập nhật danh mục thất bại!", "error");
        }
    }
    private void AskDelete(CategoriesDto c)
    {
        deleteId = c.id;
        showConfirm = true;
    }
    private void HideConfirm() => showConfirm = false;
    private async Task ConfirmDelete()
    {
        var response = await Http.DeleteAsync($"/api/Categories/{deleteId}");
        if (response.IsSuccessStatusCode)
        {
            ShowToast?.Invoke("Xóa danh mục thành công!", "success");
            await LoadCategories();
        }
        else
        {
            ShowToast?.Invoke("Xóa danh mục thất bại!", "error");
        }
        showConfirm = false;
    }
    private async Task ChangePage(int p)
    {
        page = p;
        await LoadCategories();
    }
}