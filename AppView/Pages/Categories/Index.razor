@page "/categories"
@attribute [Authorize(Roles = "Admin,Staff")]
@using AppDB.Models.DtoAndViewModels.CategoriesService.Dto
@using AppDB.Models.DtoAndViewModels.CategoriesService.ViewModels
@using AppDB.Models.DtoAndViewModels.BaseServices.Common
@using AppView.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@inject IApiService ApiService
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Quản lý Danh mục</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Quản lý Danh mục</h4>
                    <button class="btn btn-primary" @onclick="NavigateToCreate">
                        <i class="fas fa-plus"></i> Thêm mới
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search Form -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Tìm theo tên danh mục..."
                                    @bind="searchModel.CategoryName" @bind:event="oninput" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="SearchCategories">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Tìm theo mô tả..."
                                    @bind="searchModel.Description" @bind:event="oninput" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="SearchCategories">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-secondary" @onclick="ResetSearch">
                                <i class="fas fa-refresh"></i> Làm mới
                            </button>
                        </div>
                    </div>

                    <!-- Categories Table -->
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (categories?.Items != null && categories.Items.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>STT</th>
                                        <th>Tên danh mục</th>
                                        <th>Mô tả</th>
                                        <th>Ngày tạo</th>
                                        <th>Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < categories.Items.Count; i++)
                                    {
                                        var category = categories.Items[i];
                                        var index = (categories.PageIndex - 1) * categories.PageSize + i + 1;
                                        <tr>
                                            <td>@index</td>
                                            <td>@category.CategoryName</td>
                                            <td>@(string.IsNullOrEmpty(category.Description) ? "-" : category.Description)</td>
                                            <td>@category.createdDate.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-primary"
                                                        @onclick="() => NavigateToDetails(category.id)" title="Xem chi tiết">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-info"
                                                        @onclick="() => NavigateToEdit(category.id)" title="Chỉnh sửa">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger"
                                                        @onclick="() => DeleteCategory(category.id)" title="Xóa">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (categories.TotalPage > 1)
                        {
                            <nav aria-label="Categories pagination">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(categories.PageIndex <= 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadCategories(categories.PageIndex - 1)"
                                            disabled="@(categories.PageIndex <= 1)">
                                            Trước
                                        </button>
                                    </li>
                                    @for (int i = Math.Max(1, categories.PageIndex - 2); i <= Math.Min(categories.TotalPage,
                                                                categories.PageIndex + 2); i++)
                                    {
                                        <li class="page-item @(i == categories.PageIndex ? "active" : "")">
                                            <button class="page-link" @onclick="() => LoadCategories(i)">@i</button>
                                        </li>
                                    }
                                    <li class="page-item @(categories.PageIndex >= categories.TotalPage ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadCategories(categories.PageIndex + 1)"
                                            disabled="@(categories.PageIndex >= categories.TotalPage)">
                                            Sau
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Không có danh mục nào</h5>
                            <p class="text-muted">Hãy thêm danh mục đầu tiên để bắt đầu</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private PagedList<CategoriesDto>? categories;
    private CategoriesSearch searchModel = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/categories/create");
    }

    private void NavigateToDetails(Guid id)
    {
        Navigation.NavigateTo("/categories/" + id);
    }

    private void NavigateToEdit(Guid id)
    {
        Navigation.NavigateTo("/categories/edit/" + id);
    }

    private async Task LoadCategories(int page = 1)
    {
        isLoading = true;
        try
        {
            var queryParams = new List<string>();

            if (page > 1) queryParams.Add($"pageIndex={page}");
            if (searchModel.CategoryName != null) queryParams.Add($"categoryName={Uri.EscapeDataString(searchModel.CategoryName)}");
            if (searchModel.Description != null) queryParams.Add($"description={Uri.EscapeDataString(searchModel.Description)}");

            var queryString = queryParams.Count > 0 ? "?" + string.Join("&", queryParams) : "";
            var response = await ApiService.GetAsync<PagedList<CategoriesDto>>($"Categories{queryString}");

            if (response.Success)
            {
                categories = response.Data;
            }
            else
            {
                ToastService.ShowError("Lỗi", response.Message ?? "Không thể tải danh sách danh mục");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Lỗi", $"Lỗi kết nối: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchCategories()
    {
        await LoadCategories(1);
    }

    private async Task ResetSearch()
    {
        searchModel = new CategoriesSearch();
        await LoadCategories(1);
    }



    private async Task DeleteCategory(Guid id)
    {
        if (!await ConfirmDelete())
            return;

        try
        {
            var response = await ApiService.DeleteAsync($"Categories/{id}");

            if (response.Success)
            {
                ToastService.ShowSuccess("Thành công", "Xóa danh mục thành công!");
                await LoadCategories();
                await ResetSearch();
            }
            else
            {
                ToastService.ShowError("Lỗi", response.Message ?? "Xóa danh mục thất bại");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Lỗi", $"Lỗi kết nối: {ex.Message}");
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa danh mục này?");
    }
}
