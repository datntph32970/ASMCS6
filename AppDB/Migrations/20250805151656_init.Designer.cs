// <auto-generated />
using System;
using AppDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDB.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250805151656_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDB.Models.Categories", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AppDB.Models.ComboDetails", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("ComboID");

                    b.HasIndex("ProductID");

                    b.ToTable("ComboDetails");
                });

            modelBuilder.Entity("AppDB.Models.Combos", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("AppDB.Models.OrderDetails", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("AppDB.Models.Orders", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StaffID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AppDB.Models.Products", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AppDB.Models.Roles", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = new Guid("11111111-1111-1111-1111-111111111111"),
                            RoleName = "Admin",
                            createdById = new Guid("11111111-1111-1111-1111-111111111111"),
                            createdByName = "System",
                            createdDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoleName = "Staff",
                            createdById = new Guid("11111111-1111-1111-1111-111111111111"),
                            createdByName = "System",
                            createdDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = new Guid("33333333-3333-3333-3333-333333333333"),
                            RoleName = "Customer",
                            createdById = new Guid("11111111-1111-1111-1111-111111111111"),
                            createdByName = "System",
                            createdDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AppDB.Models.Status", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("AppDB.Models.StatusOrders", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Statusid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("OrderId");

                    b.HasIndex("Statusid");

                    b.ToTable("StatusOrders");
                });

            modelBuilder.Entity("AppDB.Models.Users", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("updatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("updatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Address = "Admin Address",
                            Email = "admin@example.com",
                            FullName = "Administrator",
                            Password = "rA59A3gXCU6eC0RB+brjIJ1nsC+khJFwZfcbFhCaGng=",
                            Phone = "0123456789",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Username = "admin",
                            createdById = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            createdByName = "System",
                            createdDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AppDB.Models.ComboDetails", b =>
                {
                    b.HasOne("AppDB.Models.Combos", "Combo")
                        .WithMany("ComboDetails")
                        .HasForeignKey("ComboID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDB.Models.Products", "Product")
                        .WithMany("ComboDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AppDB.Models.OrderDetails", b =>
                {
                    b.HasOne("AppDB.Models.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDB.Models.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AppDB.Models.Orders", b =>
                {
                    b.HasOne("AppDB.Models.Users", "Customer")
                        .WithMany("Customer_Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDB.Models.Users", "Staff")
                        .WithMany("Staff_Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AppDB.Models.Products", b =>
                {
                    b.HasOne("AppDB.Models.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AppDB.Models.StatusOrders", b =>
                {
                    b.HasOne("AppDB.Models.Orders", "Order")
                        .WithMany("StatusOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDB.Models.Status", "Status")
                        .WithMany("StatusOrders")
                        .HasForeignKey("Statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AppDB.Models.Users", b =>
                {
                    b.HasOne("AppDB.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppDB.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AppDB.Models.Combos", b =>
                {
                    b.Navigation("ComboDetails");
                });

            modelBuilder.Entity("AppDB.Models.Orders", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("StatusOrders");
                });

            modelBuilder.Entity("AppDB.Models.Products", b =>
                {
                    b.Navigation("ComboDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("AppDB.Models.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppDB.Models.Status", b =>
                {
                    b.Navigation("StatusOrders");
                });

            modelBuilder.Entity("AppDB.Models.Users", b =>
                {
                    b.Navigation("Customer_Orders");

                    b.Navigation("Staff_Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
